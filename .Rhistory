lower  = dw ["low"],
upper  = dw ["high"],
p      = 0.95,
method = "mean")
# sample input parameter values (latin hyper cube sampling)
# based on their distributions for psa runs
dw_psa_values <- qbeta (p      = cube [, i],
shape1 = shape_param$alpha,
shape2 = shape_param$beta)
# data table of psa values containg
# disability weights of different sequelaes (cancer phases)
dw_psa_DT <- cbind (dw_psa_DT, dw_psa_values)
}
View (dw_psa_DT)
# set column names for psa table of disability weights
names (dw_psa_DT) <- c ("run_id",
"dw_diagnosis",
"dw_control",
"dw_metastatic",
"dw_terminal")
View (dw_psa_DT)
# create data table to store psa values of
# (incidence, mortality, prevalence) ratios
burden_psa_DT <- data.table ()
View (burden_psa_DT)
burden_metrics
i <- 1
# Part of 98 VIMC countries
# KIR - Kiribati
#
# Not part of 112 VIMC countries
# FSM - Micronesia (Federated States of)
# MHL - Marshall Islands
# TON - Tonga
# TUV - Tuvalu
# XK  - Kosovo
if (country_code != "FSM" & country_code != "KIR" & country_code != "MHL" &
country_code != "TON" & country_code != "TUV" & country_code != "XK") {
# print (country_code)  # testing purposes (REMOVE this line later)
# mean value and 95% uncertainty intervals -- incidence, mortality, prevalence
if (burden_metrics [i] == "incidence") {
burden  <- data.incidence_ui  [iso3 == country_code, c(Mid, Low, High)]
}
else if (burden_metrics [i] == "mortality") {
burden  <- data.mortcecx_ui   [iso3 == country_code, c(Mid, Low, High)]
}
else if (burden_metrics [i] == "prevalence") {
burden <- data.prevalence_ui [iso3 == country_code, c(Mid, Low, High)]
}
names (burden)  <- c("mid", "low", "high")
# log of burden values
log_burden  <- log (burden)
# Estimating the global cancer incidence and mortality in 2018:
# GLOBOCAN sources and methods
# (refer to paper for defintion of uncertainty intervals)
# https://www.ncbi.nlm.nih.gov/pubmed/30350310
# standard error in log scale
log_burden_se  <- (log_burden  ["high"] - log_burden ["low"]) / 3.92
# sample input parameter values (latin hyper cube sampling)
# based on their distributions for psa runs
burden_psa_values <- qlnorm (p       = cube [, (length (cecx_phases) + i)],
meanlog = log_burden ["mid"],
sdlog   = log_burden_se)
# # -- mortality
# mortality_psa_values <- qlnorm (p       = cube [, 6],
#                                 meanlog = log_mortality ["mid"],
#                                 sdlog   = log_mortality_se)
# # -- prevalence
# prevalence_psa_values <- qlnorm (p       = cube [, 7],
#                                  meanlog = log_prevalence ["mid"],
#                                  sdlog   = log_prevalence_se)
# ratio of psa values (incidence, mortality, prevalence) to mean values
burden_ratio  <- burden_psa_values / burden ["mid"]
# data table of psa values containg
# (incidence, mortality, prevalence) ratios
burden_psa_DT <- cbind (burden_psa_DT, burden_ratio)
}
burden_metrics [i]
# mean value and 95% uncertainty intervals -- incidence, mortality, prevalence
if (burden_metrics [i] == "incidence") {
burden  <- data.incidence_ui  [iso3 == country_code, c(Mid, Low, High)]
}
burden
names (burden)  <- c("mid", "low", "high")
burden
# log of burden values
log_burden  <- log (burden)
# standard error in log scale
log_burden_se  <- (log_burden  ["high"] - log_burden ["low"]) / 3.92
# sample input parameter values (latin hyper cube sampling)
# based on their distributions for psa runs
burden_psa_values <- qlnorm (p       = cube [, (length (cecx_phases) + i)],
meanlog = log_burden ["mid"],
sdlog   = log_burden_se)
View (burden_psa_values)
# ratio of psa values (incidence, mortality, prevalence) to mean values
burden_ratio  <- burden_psa_values / burden ["mid"]
View (burden_ratio)
# data table of psa values containg
# (incidence, mortality, prevalence) ratios
burden_psa_DT <- cbind (burden_psa_DT, burden_ratio)
View (burden_psa_DT)
# create data table to store psa values of
# (incidence, mortality, prevalence) ratios
burden_psa_DT <- data.table ()
# data table of psa values containg
# (incidence, mortality, prevalence) ratios
burden_psa_DT <- cbind (burden_psa_DT, burden_ratio)
View (burden_psa_DT)
i <- 2
if (burden_metrics [i] == "mortality") {
burden  <- data.mortcecx_ui   [iso3 == country_code, c(Mid, Low, High)]
}
burdem
burden
names (burden)  <- c("mid", "low", "high")
# log of burden values
log_burden  <- log (burden)
# standard error in log scale
log_burden_se  <- (log_burden  ["high"] - log_burden ["low"]) / 3.92
# sample input parameter values (latin hyper cube sampling)
# based on their distributions for psa runs
burden_psa_values <- qlnorm (p       = cube [, (length (cecx_phases) + i)],
meanlog = log_burden ["mid"],
sdlog   = log_burden_se)
# ratio of psa values (incidence, mortality, prevalence) to mean values
burden_ratio  <- burden_psa_values / burden ["mid"]
# data table of psa values containg
# (incidence, mortality, prevalence) ratios
burden_psa_DT <- cbind (burden_psa_DT, burden_ratio)
View (burden_psa_DT)
i <- 3
if (burden_metrics [i] == "prevalence") {
burden <- data.prevalence_ui [iso3 == country_code, c(Mid, Low, High)]
}
i <- 2
if (burden_metrics [i] == "mortality") {
burden  <- data.mortcecx_ui   [iso3 == country_code, c(Mid, Low, High)]
}
names (burden)  <- c("mid", "low", "high")
# log of burden values
log_burden  <- log (burden)
# standard error in log scale
log_burden_se  <- (log_burden  ["high"] - log_burden ["low"]) / 3.92
# sample input parameter values (latin hyper cube sampling)
# based on their distributions for psa runs
burden_psa_values <- qlnorm (p       = cube [, (length (cecx_phases) + i)],
meanlog = log_burden ["mid"],
sdlog   = log_burden_se)
# ratio of psa values (incidence, mortality, prevalence) to mean values
burden_ratio  <- burden_psa_values / burden ["mid"]
# data table of psa values containg
# (incidence, mortality, prevalence) ratios
burden_psa_DT <- cbind (burden_psa_DT, burden_ratio)
# set column names for psa table of disability weights
names (burden_psa_DT) <- c ("incidence_ratio",
"mortality_ratio",
"prevalence_ratio")
View (burden_psa_DT)
# create data table specific for this country with parameter values for
# probabilistic sensitivity analysis
country_psa <- data.table (
country = rep (x = country_code, times = psa),
dw_psa_DT,
burden_psa_DT
)
View (country_psa)
# add country specific table to full table
psadat <- rbindlist (list (psadat, country_psa))
View (psadat)
# reshape psa data table to wide format (for VIMC)
psadat_vimc <- dcast (psadat,
run_id ~ country,
value.var = colnames (psadat [, -c("run_id", "country")]))
view (psadat_vimc)
View (psadat_vimc)
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
mu
?rnorm
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
x
mu
z
y
# display 1st 5 (x, y) pairs & y values rounded to 3 places
cbind (x [1:5], round (y [1:5], 3))
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
?plot
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
summary (fit1)
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
# coefficients
fit1$coefficients
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
alpha
beta
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
?lm
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
fit2$coefficients
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
fit2$coefficients
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
# coefficients
print (fit2$coefficients)
source('~/GitHub/tutorials/stats_scientific_method_peter_diggle/r_session.R')
# use dhs api, etc to analyse vaccine equity
# https://cran.r-project.org/web/packages/rdhs/index.html
# Anemia prevalence: an rdhs example
# https://cran.r-project.org/web/packages/rdhs/vignettes/anemia.html
library(rdhs)
library(data.table)
library(ggplot2)
library(survey)
library(haven)
rm (list = ls ())
# API calls return data.frame objects, so if you prefer to use data.table
# objects then convert afterwards, or we can set this up within our config using set_rdhs_config.
set_rdhs_config (data_frame = "data.table::as.data.table")
warnings ()
dat
dat <- statcomp[,.(Indicator, CountryName, SurveyYear, Value, DenominatorWeighted)]
# use dhs api, etc to analyse vaccine equity
# https://cran.r-project.org/web/packages/rdhs/index.html
# Anemia prevalence: an rdhs example
# https://cran.r-project.org/web/packages/rdhs/vignettes/anemia.html
library(rdhs)
library(data.table)
library(ggplot2)
library(survey)
library(haven)
rm (list = ls ())
# API calls return data.frame objects, so if you prefer to use data.table
# objects then convert afterwards, or we can set this up within our config using set_rdhs_config.
set_rdhs_config (data_frame = "data.table::as.data.table")
# Query the API for a list of all StatCompiler indicators, and then search the
# indicators for those that have "anemia" in the indicator name.
indicators <- dhs_indicators()
tail (indicators [grepl ("basic", Label),
.(IndicatorId, ShortName, Label)])
# First, use dhs_countries() to query the list of DHS countries to identify the
# DHS country code for each country.
countries <- dhs_countries()
dhscc <- countries[CountryName %in% c("Ethiopia"), DHS_CountryCode]
print (dhscc)
# Now query the indicators dataset for the basic vaccinations for
# these countries.
statcomp <- dhs_data(indicatorIds = "CH_VACC_C_BAS", countryIds = dhscc)
statcomp[,.(Indicator, CountryName, SurveyYear, Value, DenominatorWeighted)]
ggplot(statcomp, aes(SurveyYear, Value, col=CountryName)) +
geom_point() + geom_line()
dhscc <- countries[CountryName %in% c("Ethiopia", "Ghana"), DHS_CountryCode]
print (dhscc)
# Now query the indicators dataset for the basic vaccinations for
# these countries.
statcomp <- dhs_data(indicatorIds = "CH_VACC_C_BAS", countryIds = dhscc)
statcomp[,.(Indicator, CountryName, SurveyYear, Value, DenominatorWeighted)]
ggplot(statcomp, aes(SurveyYear, Value, col=CountryName)) +
geom_point() + geom_line()
dhscc <- countries[CountryName %in% c("Ethiopia"), DHS_CountryCode]
print (dhscc)
# Now query the indicators dataset for the basic vaccinations for
# these countries.
statcomp <- dhs_data(indicatorIds = "CH_VACC_C_BAS", countryIds = dhscc)
statcomp[,.(Indicator, CountryName, SurveyYear, Value, DenominatorWeighted)]
ggplot(statcomp, aes(SurveyYear, Value, col=CountryName)) +
geom_point() + geom_line()
library (plotly)
plot_ly (statcomp)
plot_ly (statcomp, x = SurveyYear, y = Value)
plot_ly (statcomp, x = "SurveyYear", y = "Value")
plot_ly (statcomp, x = ~SurveyYear, y = ~Value)
ggplot(statcomp, aes(SurveyYear, Value, col=CountryName)) +
geom_point() + geom_line()
statcomp
View (statcomp)
View (indicators)
## make a call with no arguments
sc <- dhs_survey_characteristics()
View(sc)
sc[grepl("Malaria", sc$SurveyCharacteristicName), ]
# How to use rdhs?
# https://cran.r-project.org/web/packages/rdhs/vignettes/introduction.html
# https://cran.r-project.org/web/packages/rdhs/index.html
# load required packages
library (rdhs)
library (ggplot2)
# clear workspace
rm (list = ls ())
# How to use rdhs?
# https://cran.r-project.org/web/packages/rdhs/vignettes/introduction.html
# https://cran.r-project.org/web/packages/rdhs/index.html
# ------------------------------------------------------------------------------
# Overview
# rdhs is a package for management and analysis of Demographic and Health Survey
# (DHS) data. This includes functionality to:
#
# 1. Access standard indicator data (i.e. DHS STATcompiler) in R via the DHS API.
# 2. Identify surveys and datasets relevant to a particular analysis.
# 3. Download survey datasets from the DHS website.
# 4. Load datasets and associated metadata into R.
# 5. Extract variables and combining datasets for pooled multi-survey analyses.
#
# This process is described below and should cover most functionality that will
# be needed for working with these datasets.
# ------------------------------------------------------------------------------
# load required packages
library (rdhs)
library (ggplot2)
# clear workspace
rm (list = ls ())
# How to use rdhs?
# https://cran.r-project.org/web/packages/rdhs/vignettes/introduction.html
# https://cran.r-project.org/web/packages/rdhs/index.html
# ------------------------------------------------------------------------------
# Overview
# rdhs is a package for management and analysis of Demographic and Health Survey
# (DHS) data. This includes functionality to:
#
# 1. Access standard indicator data (i.e. DHS STATcompiler) in R via the DHS API.
# 2. Identify surveys and datasets relevant to a particular analysis.
# 3. Download survey datasets from the DHS website.
# 4. Load datasets and associated metadata into R.
# 5. Extract variables and combining datasets for pooled multi-survey analyses.
#
# This process is described below and should cover most functionality that will
# be needed for working with these datasets.
# ------------------------------------------------------------------------------
# load required packages
library (rdhs)
library (ggplot2)
# clear workspace
rm (list = ls ())
# How to use rdhs?
# https://cran.r-project.org/web/packages/rdhs/vignettes/introduction.html
# https://cran.r-project.org/web/packages/rdhs/index.html
# ------------------------------------------------------------------------------
# Overview
# rdhs is a package for management and analysis of Demographic and Health Survey
# (DHS) data. This includes functionality to:
#
# 1. Access standard indicator data (i.e. DHS STATcompiler) in R via the DHS API.
# 2. Identify surveys and datasets relevant to a particular analysis.
# 3. Download survey datasets from the DHS website.
# 4. Load datasets and associated metadata into R.
# 5. Extract variables and combining datasets for pooled multi-survey analyses.
#
# This process is described below and should cover most functionality that will
# be needed for working with these datasets.
# ------------------------------------------------------------------------------
# load required packages
library (rdhs)
library (ggplot2)
# clear workspace
rm (list = ls ())
survs
# use dhs api, etc to analyse vaccine equity
# https://cran.r-project.org/web/packages/rdhs/index.html
# load required packages
library (rdhs)
library (data.table)
library (ggplot2)
library (survey)
library (haven)
# clear workspace
rm (list = ls ())
# Download survey datasets from the DHS website.
## set up your credentials (run it first time)
# set_rdhs_config (email = "kaja.abbas@lshtm.ac.uk",
#                  project = "Health impact of public health interventions",
#                  data_frame = "data.table::as.data.table")
## make a call with no arguments
sc <- dhs_survey_characteristics ()
sc [grepl ("Vaccination",
sc$SurveyCharacteristicName), ]
#     SurveyCharacteristicID    SurveyCharacteristicName
# 1:  93                        Vaccinations from health facilities
# lets find all the surveys that fit our search criteria
survs <- dhs_surveys (surveyCharacteristicIds = 93,
countryIds = c("ET"),
surveyType = "DHS",
surveyYearStart = 2016)
survs
View(survs)
survs$SurveyId
# and lastly use this to find the datasets we will want to download and
# let's download the flat files (.dat) datasets (have a look in the dhs_datasets
# documentation for all argument options, and fileformat abbreviations etc.)
# datasets <- dhs_datasets (surveyIds = survs$SurveyId,
#                           fileFormat = "flat")
datasets <- dhs_datasets (surveyIds = survs$SurveyId,
fileFormat = "flat")
View(datasets)
# download datasets
downloads <- get_datasets (datasets$FileName)
# download datasets
downloads <- get_datasets (datasets$FileName)
# download datasets
downloads <- get_datasets (datasets$FileName)
# and lastly use this to find the datasets we will want to download and
# let's download the flat files (.dat) datasets (have a look in the dhs_datasets
# documentation for all argument options, and fileformat abbreviations etc.)
# datasets <- dhs_datasets (surveyIds = survs$SurveyId,
#                           fileFormat = "flat")
datasets <- dhs_datasets (surveyIds = survs$SurveyId,
fileFormat = "flat")
# download datasets
downloads <- get_datasets (datasets$FileName)
# and lastly use this to find the datasets we will want to download and
# let's download the flat files (.dat) datasets (have a look in the dhs_datasets
# documentation for all argument options, and fileformat abbreviations etc.)
# datasets <- dhs_datasets (surveyIds = survs$SurveyId,
#                           fileFormat = "flat")
datasets <- dhs_datasets (surveyIds = survs$SurveyId,
fileFormat = "flat")
# use dhs api, etc to analyse vaccine equity
# https://cran.r-project.org/web/packages/rdhs/index.html
# load required packages
library (rdhs)
library (data.table)
library (ggplot2)
library (survey)
library (haven)
# clear workspace
rm (list = ls ())
# Download survey datasets from the DHS website.
## set up your credentials (run it first time)
# set_rdhs_config (email = "kaja.abbas@lshtm.ac.uk",
#                  project = "Health impact of public health interventions",
#                  data_frame = "data.table::as.data.table")
## make a call with no arguments
sc <- dhs_survey_characteristics ()
sc [grepl ("Vaccination",
sc$SurveyCharacteristicName), ]
#     SurveyCharacteristicID    SurveyCharacteristicName
# 1:  93                        Vaccinations from health facilities
# lets find all the surveys that fit our search criteria
survs <- dhs_surveys (surveyCharacteristicIds = 93,
countryIds = c("ET"),
surveyType = "DHS",
surveyYearStart = 2016)
# and lastly use this to find the datasets we will want to download and
# let's download the flat files (.dat) datasets (have a look in the dhs_datasets
# documentation for all argument options, and fileformat abbreviations etc.)
# datasets <- dhs_datasets (surveyIds = survs$SurveyId,
#                           fileFormat = "flat")
datasets <- dhs_datasets (surveyIds = survs$SurveyId,
fileFormat = "flat")
# use dhs api, etc to analyse vaccine equity
# https://cran.r-project.org/web/packages/rdhs/index.html
# load required packages
library (rdhs)
library (data.table)
library (ggplot2)
library (survey)
library (haven)
# clear workspace
rm (list = ls ())
# use dhs api, etc to analyse vaccine equity
# https://cran.r-project.org/web/packages/rdhs/index.html
# load required packages
library (rdhs)
library (data.table)
library (ggplot2)
library (survey)
library (haven)
# clear workspace
rm (list = ls ())
set_rdhs_config (email = "kaja.abbas@lshtm.ac.uk",
project = "Health impact of public health interventions",
data_frame = "data.table::as.data.table")
library (rdhs)
# use dhs api, etc to analyse vaccine equity
# https://cran.r-project.org/web/packages/rdhs/index.html
# load required packages
library (rdhs)
library (data.table)
library (ggplot2)
library (survey)
library (haven)
# clear workspace
rm (list = ls ())
## set up your credentials (run it first time)
set_rdhs_config (email = "kaja.abbas@lshtm.ac.uk",
project = "Health impact of public health interventions",
data_frame = "data.table::as.data.table")
0.92 * 52/12
data (package = "prime")
library (prime)
View (data.mortall.unwpp.mx)
RunCountry
RunCohort
head (data.mortall.unwpp.mx)
library (prime)
View (data.sexual_debut)
View (data.sexual_debut [cluster.id == NA])
View (data.sexual_debut [is.na (cluster.id)])
View (data.sexual_debut)
library (prime)
setwd("~/GitHub/vaccine_equity_ethiopia")
source('~/GitHub/vaccine_equity_ethiopia/plot_old1.R')
source('~/GitHub/vaccine_equity_ethiopia/plot.R')
